<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.UserMapper">
<!--    可以将表中的所有字段放在sql标签内，用的时候，直接使用<include>标签引用，提高复用率-->
    <sql id = "selectFields">
        id, username, password, salt, email, type, status,activation_code, header_url, create_time
    </sql>

    <sql id = "insertFileds">
        username, password, salt, email, type, status,activation_code, header_url, create_time
    </sql>

<!--    查询时要返回 类型，一般insert和update不需要返回类型-->
<!--    id是Usermapper中的方法名-->
    <select id="selectById" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where id = #{id}
    </select>

    <select id="selectByName" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where username = #{username}
    </select>

    <select id="selectByEmail" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where email = #{email}
    </select>

<!--    传入的参数如果是一个bean的类型，即是一个类，那么就需要使用parameterType声明一下类型-->
<!--    insert时，还要声明一下主键，因为是在插入时，数据库会自动生成一个id，然后插入的时候直接填到表中-->
    <insert id="insertUser" parameterType="User" keyProperty="id">
        insert into user(<include refid="insertFileds"></include>)
        values(#{username}, #{password}, #{salt}, #{email}, #{type}, #{status}, #{activationCode}, #{headerUrl}, #{createTime})
    </insert>

    <update id="updateHeader">
        update user set header_url = #{headerUrl} where id= #{id}
    </update>

    <update id="updatePassword">
        update user set password = #{password} where id= #{id}
    </update>

    <update id="updateStatus">
        update user set status = #{status} where id= #{id}
    </update>


</mapper>